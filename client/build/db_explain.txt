Sure, I can help you design the structure of your MySQL database. Based on your description, you'll need tables for users, songs, lists, and a table to establish the many-to-many relationship between songs and lists. Here's a simplified version of the database schema:

1. **Users Table:**
   - `user_id` (Primary Key)
   - `username`
   - `password`
   
2. **Songs Table:**
   - `song_id` (Primary Key)
   - `name`
   - `album_picture_url`
   
3. **Lists Table:**
   - `list_id` (Primary Key)
   - `list_name`
   - `user_id` (Foreign Key referencing the Users Table)
   
4. **ListSongs Table (Many-to-Many Relationship Table):**
   - `list_song_id` (Primary Key)
   - `list_id` (Foreign Key referencing the Lists Table)
   - `song_id` (Foreign Key referencing the Songs Table)
   - `description`
   
With this structure, each user will have their own unique `user_id`, and they can create multiple lists, each with a unique `list_id`. Each list will have a `user_id` that identifies the user who created the list.

The `Songs` table will store information about each song, including its `song_id`, name, and album picture URL.

The `Lists` table will store information about each list, including its `list_id`, `list_name`, and the `user_id` that indicates the user who created the list.

The `ListSongs` table establishes a many-to-many relationship between songs and lists. It includes the `list_song_id`, `list_id`, `song_id`, and a `description` field to store the custom description for each song in a list.

When a user creates a list, you would insert a new row into the `Lists` table with the corresponding `user_id`. When a song is added to a list, you would insert a new row into the `ListSongs` table with the `list_id`, `song_id`, and description.

Remember, this is a simplified structure and may require further optimization or additional fields based on your specific needs. Additionally, make sure to implement proper security measures when handling user authentication and sensitive data like passwords.